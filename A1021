#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
const int maxn = 10010;
int n, a, b, maxnum = 0, tempmax, cnt = 0;
vector<int> v[maxn];
bool visited[maxn] = {false};
vector<int> ans;
void DFS(int root, int deep){
	if(deep > tempmax){
		tempmax = deep;
	}
	visited[root] = true;
	for(int i = 0; i < v[root].size(); i++){
		if(visited[v[root][i]] == false){
			DFS(v[root][i], deep+1);
		}                                 
	}
}
int main(){
	scanf("%d", &n);
	for(int i = 0; i < n-1; i++){
		scanf("%d%d", &a, &b);
		v[a].push_back(b);
		v[b].push_back(a);
	}
	for(int i = 1; i <= n; i++){
		if(visited[i] == false){
			DFS(i, 1);
			cnt++;
		}
	}
	if(cnt != 1){
		printf("Error: %d components\n", cnt);
		return 0;
	}
	for(int i = 1; i <= n; i++){
		fill(visited, visited + maxn, false);
		tempmax = 0;
		DFS(i, 1);
		if(tempmax > maxnum){
			maxnum = tempmax;
			
			ans.clear();
			ans.push_back(i);
		}
		else if(tempmax == maxnum){
			ans.push_back(i);
		}
	}
	sort(ans.begin(), ans.end());
	for(int i = 0; i < ans.size(); i++){
		printf("%d\n", ans[i]);
	}
	return 0;
}
